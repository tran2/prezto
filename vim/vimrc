" profile start syntastic.log
" profile! file */syntastic/*
" from thoughtbot
" :verbose imap <tab>

" so that yy, D, P will work with clipboard!
set clipboard=unnamed
" for ubuntu
" set clipboard+=unnamedplus

let mapleader = " "
" map Leader to plugin since it uses <Leader><Leader> by default
map <Leader> <Plug>(easymotion-prefix)
" switch between last buffer and current buffer by double tap space
map <leader><leader> <c-^>

" Y = Yank to EOL like C and D
map Y y$
" space+enter to enter current line without going into insert mode
map <Leader><CR> i<CR><Esc>
set backspace=indent,eol,start
set autoindent
set nofoldenable
set nostartofline
" change for cmd height
set cmdheight=2
set nobackup
set nowritebackup
set noswapfile
set history=50
set autowrite

set ruler
set laststatus=2
set rulerformat=%l\:%c
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l\:%c%V%)

set tabstop=2
set softtabstop=2
set shiftwidth=4
set shiftround
set expandtab

" show the 80 characters ruler
set textwidth=80
set colorcolumn=+1
set formatoptions=qrn1
highlight ColorColumn ctermbg=4
highlight Search ctermfg=17 ctermbg=14

" numbers
set number
set numberwidth=5

" new split window will be bottom or right (instead of top and left)
set splitbelow
set splitright

" Ctrl + jkhl to move around windows (now using plugin for this)
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l

set switchbuf=usetab,newtab
syntax on
" either dark or light
set background=light

" display whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" one space after punctuation
set nojoinspaces

" command lines
set wildmenu
set showcmd

" searches
set hlsearch
" ignore cases unless caps
set ignorecase
set smartcase

" keep undo across buffer
set hidden

inoremap jk <Esc>

" autosave on focus lost
:au FocusLost * :wa
"-------------------------------------------------------------------------------
" Plugin Settings
"-------------------------------------------------------------------------------

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " ag takes in ~/.agignore first
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|.git'

" fzf
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
" if executable('ag')
"   let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
" endif
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)


  " <leader>r will search word under the cursor
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --ignore-case --hidden '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('up:60%'),
  \   <bang>0)
  nmap <leader>r "zyiw:exe"Rg ".@z.""<cr>
endif
nnoremap <C-P> :FZF -m<CR>
nnoremap ; :Buffers<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_tags_command = 'ctags -R'


" m - meta key
let g:yankring_replace_n_pkey = '<m-p>'
let g:yankring_replace_n_nkey = '<m-n>'

let g:SuperTabDefaultCompletionType = '<C-n>'

" js syntax
let g:used_javascript_libs = 'jasmine,chai,react'

" on MAC, this is the python used to compile ycm
let g:ycm_path_to_python_interpreter='/usr/local/bin/python3'
let g:ycm_server_python_interpreter='/usr/local/bin/python3'

" bash support output redirection
let g:BASH_OutputGvim            = "buffer"

" nerdtree
map <C-n> :NERDTreeToggle<CR>

" grepper fb for project search, fb for buffer search
" nnoremap <Leader>fp :Grepper<Space>-query<Space>
" nnoremap <Leader>fb :Grepper<Space>-buffers<Space>-query<Space>-<Space>

" enable smarter tab line (show buffers when only one tab is open)
let g:airline#extensions#tabline#enabled = 1

" deoplete
let g:python2_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'
let g:deoplete#enable_at_startup = 1

" deoplete
"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ '...'
                \ ]
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
\]
set completeopt=longest,menuone,preview
let g:deoplete#sources = {}
let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'ternjs']
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']
autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
let g:UltiSnipsExpandTrigger="<C-j>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" close the preview window when you're not using it
let g:SuperTabClosePreviewOnPopupClose = 1
" or just disable the preview entirely
set completeopt-=preview

" ale
nmap <silent> <Leader>N <Plug>(ale_previous_wrap)
nmap <silent> <Leader>n <Plug>(ale_next_wrap)
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['eslint']
let g:ale_fix_on_save = 1

" to resync syntax highlighting https://github.com/posva/vim-vue/issues/76
autocmd FileType vue syntax sync fromstart

"autosave
let g:auto_save = 1  " enable AutoSave on Vim startup

" vim-go
let g:go_fmt_command = "goimports"

" nvim-typescript
" map <C-g> :TSDef<CR>

" CamelCaseMotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

"-------------------------------------------------------------------------------
" vim-plug plugins
"-------------------------------------------------------------------------------
" ~/.config/nvim/plugged
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
""    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin()
" Plug 'neomake/neomake'
Plug 'scrooloose/nerdtree'
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs'
" Tabularize /= to align =
Plug 'godlygeek/tabular'
Plug 'heavenshell/vim-jsdoc'
Plug 'christoomey/vim-run-interactive'
" use ctrl+p ctrl+f to switch buffer
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Plug 'fatih/vim-go'
" Plug 'janko-m/vim-test'
Plug 'pbrisbin/vim-mkdir'
Plug 'posva/vim-vue'
Plug 'vim-scripts/vim-stylus'
Plug 'slim-template/vim-slim'
" use [  ] such as [l ]l for :lnext :lprev type :help unimpaired
" use [  ] such as [b ]b for buffers switching :help unimpaired
Plug 'tpope/vim-unimpaired'
" navigate split same with tmux ctrl hjkl
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tomtom/tcomment_vim'
" TODO: add short key to execute YRShow
Plug 'vim-scripts/YankRing.vim'
" Plug 'othree/yajs.vim'
" Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx', 'html', 'vue'] }
" Plug 'jelera/vim-javascript-syntax'
" Plug 'othree/javascript-libraries-syntax.vim'
Plug 'ervandew/supertab'
" pip3 install neovim && pip3 install --upgrade neovim
" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'zchee/deoplete-go', { 'for': ['go'], 'do': 'make' }
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" Plug 'tran2/vim-snippets'
" make sure to npm install inside this plugin
" Plug 'ternjs/tern_for_vim', { 'for': ['javascript', 'javascript.jsx'], 'do': 'npm install' }
" Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'javascript.jsx'], 'do': 'npm install -g tern' }
" Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }
" snippet engine
" ctags remember to install on systeM
" ctags . - to generate ctags
" C-] to go to def, C-t to go back
" Plug 'craigemery/vim-autotag'
" \si
" ctrl+j to jump to next block
Plug 'WolfgangMehner/bash-support'
" fast html/css coding <c-y>,
" https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
Plug 'mattn/emmet-vim'
" help search files
Plug 'mhinz/vim-grepper'
" unite vim interfaces?
Plug 'Shougo/denite.nvim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'w0rp/ale'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-obsession'
Plug 'easymotion/vim-easymotion'
" typescript
" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
Plug 'lifepillar/vim-solarized8'
Plug 'bkad/CamelCaseMotion'

call plug#end()
" end
