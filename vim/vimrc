" from thoughtbot
" :verbose imap <tab>
let mapleader = " "
" switch between last buffer and current buffer by double tap space 
nnoremap <leader><leader> <c-^>

" Y = Yank to EOL like C and D
map Y y$

set backspace=indent,eol,start
set autoindent
set nofoldenable
set nostartofline
set cmdheight=2
set nobackup
set nowritebackup
set noswapfile
set history=50
set autowrite

set ruler
set laststatus=2
set rulerformat=%l\:%c 
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l\:%c%V%)

set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" show the 80 characters ruler
set textwidth=80
set colorcolumn=+1
set formatoptions=qrn1
highlight ColorColumn ctermbg=3

" numbers
set number
set numberwidth=5

" new split window will be bottom or right (instead of top and left)
set splitbelow
set splitright
" Ctrl + jkhl to move around windows
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
set switchbuf=usetab,newtab
syntax on

" display whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" one space after punctuation
set nojoinspaces

" command lines
set wildmenu
set showcmd

" searches
set hlsearch
" ignore cases unless caps
set ignorecase
set smartcase

"-------------------------------------------------------------------------------
" Plugin Settings
"-------------------------------------------------------------------------------
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 3
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
" m - meta key 
let g:yankring_replace_n_pkey = '<m-p>'
let g:yankring_replace_n_nkey = '<m-n>'

" make YCM compatible with UltiSnips (using supertab)
" fun<tab> will use snippet function, ctrl-n to cycle down the list
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
" better key bindings for UltiSnipsExpandTrigger (use tab)
let g:UltiSnipsExpandTrigger="<tab>"
" jump to next block in snippet fun<tab> then <tab> will jump cursor to function
" name :)
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
autocmd FileType javascript UltiSnipsAddFiletypes javascript-jasmine

"-------------------------------------------------------------------------------
" vundle plugins
"-------------------------------------------------------------------------------
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'scrooloose/nerdtree'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'jiangmiao/auto-pairs'
" Tabularize /= to align =
Plugin 'godlygeek/tabular'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'christoomey/vim-run-interactive'
" use ctrl+p ctrl+f to switch buffer
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'fatih/vim-go'
" Plugin 'janko-m/vim-test'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'mtscout6/syntastic-local-eslint.vim'
Plugin 'scrooloose/syntastic'
Plugin 'slim-template/vim-slim'
" use [  ] such as [l ]l for :lnext :lprev type :help unimpaired
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-rhubarb'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/tComment'
" TODO: add short key to execute YRShow
Plugin 'vim-scripts/YankRing.vim'
Plugin 'othree/yajs.vim'
Plugin 'ervandew/supertab'
Plugin 'valloric/YouCompleteMe'
" snippet engine
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
call vundle#end()
filetype plugin indent on
" end vundle

